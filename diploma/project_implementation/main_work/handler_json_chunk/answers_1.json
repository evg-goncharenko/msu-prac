{
    "answers": [
        {
            "value": "<p>Немного не понятно, саму модель или данные модели? Саму модель вы навряд ли можете создать динамически, потому что описание модели - это Python-класс. Точнее, наверное можно, но не логично для SQL "
        },
        {
            "value": "<pre><code>#! usr/bin/env python\n# -*-coding: utf-8 -*-\n\nfrom PIL import Image\n\nim = Image.open(\"python.jpg\")\npix = im.load()\nresult = ''\nfor x in xrange(10):\n  for y in xrange(10):\n    result += str("
        },
        {
            "value": "<p>как вариант файлы для python3 сохранять с расширением .py3 и связать его с нужным интерпретатором. Ну или указывать явно при запуске скрипта </p>\n<pre><code>python3 script.py\n</code></pre>"
        },
        {
            "value": "<pre><code>&gt;&gt;&gt; b\"\\x62\\141\\x73\\145\\x36\\64\\x5f\\144\\x65\\143\\x6f\\144\\x65\".decode()\n'base64_decode'\n&gt;&gt;&gt; 'base64_decode'.encode()\nb'base64_decode'\n</code></pre>\n<p>b - объект класса bytes<"
        },
        {
            "value": "<p>Можно здесь посмотреть: <a href=\"http://python.su/forum/viewforum.php?id=30\">http://python.su/forum/viewforum.php?id=30</a></p>\n<p>Вот к примеру <a href=\"http://python.su/forum/viewtopic.php?id=105"
        },
        {
            "value": "<p>1) Любую программу скомпилировать нельзя, только написанную специально под компилятор, например, <a href=\"http://psyco.sourceforge.net/\">psyco</a><br>\n2) Да, копать в сторону <code>cgi &amp; web</c"
        },
        {
            "value": "<p>\"Зависимости\" это то что должно быть установлено перед тем как вы хотите что либо поставить. Как Вам уже сказали Вам не хватает \"docpdf\", я бы советовал бы сначала прочитать README(я не стебусь, ча"
        },
        {
            "value": "<p>И мой вам совет учитесь сразу применять ООП модель. Пример.</p>\n<pre><code>#-*- coding: utf-8 -*-\nfrom PyQt4 import uic, QtCore, QtGui\nimport sys\nclass window(QtGui.QMainWindow):\n    def __init__(s"
        },
        {
            "value": "<p>На мой взгляд, лучшая на данный момент книга по python <strong>Изучаем Python, 4-е издание, Марк Лутц</strong>.</p>"
        },
        {
            "value": "<p>посмотрим внимательно на регулярное выражение</p>\n<pre><code>[url=(.*)]\n</code></pre>\n<p>квадратные скобки - это не просто символы, а спецзнаки, которые указывают на диапазон значений символов. То "
        },
        {
            "value": "<pre><code>def log_read()\n    with open('log.log') as fp:\n        return frozenset([l.rstrip() for l in fp])\n\ndef log_search(logs):\n    for file in glob.glob('test*.txt'):\n        with open(file) as f"
        },
        {
            "value": "<pre><code>- topics = re.findall(r'&lt;!-- Begin Topic Entry(.*)&lt;!-- End Topic Entry', res)\n+ topics = re.findall(r'&lt;!-- Begin Topic Entry(.*)&lt;!-- End Topic Entry', res, re.DOTALL)\n</code></p"
        },
        {
            "value": "<p>PyCharm от Jetbrains единственная достойная IDE для Python. Да, дорого, а что делать. Если не хочется платить, а что такое совесть давно забыто, то кряк найти труда не составит.</p>"
        },
        {
            "value": "<p>Попробуйте переустановить windows installer на какую-нибудь свежую версию, а если включено автообновление винды, то лучше всего переустановить систему и отключить обновление (практически всегда поя"
        },
        {
            "value": "<pre><code>&gt;&gt;&gt; '\\\\144\\\\x65\\\\143\\\\x6f\\\\144\\\\x65'.decode('string_escape')\n'decode'\n</code></pre>"
        },
        {
            "value": "<p>Для этого существует стандартная функция <a href=\"http://docs.python.org/library/functions.html#zip\">zip</a>:</p>\n<pre><code>for t in zip(r1, r2):\n    print t[0], t[1]\n</code></pre>"
        },
        {
            "value": "<p><code>__all__</code> в Pythone - это список публичных объектов данного модуля. Т.е, допустим, у вас есть некий mymodule.py, в нем описано очень много объектов, и не требуется давать пользоваться им"
        },
        {
            "value": "<p>Тесты есть?\nЕсли да - начни с них, это лучшая документация.</p>"
        },
        {
            "value": "<pre><code>sorted(a, key=lambda x : x[:x.index(' ')])\n</code></pre>\n<p>если хотите лексикографически отсортировать, а если как числа, то</p>\n<pre><code>sorted(a, key=lambda x : int(x[:x.index(' ')]))\n"
        },
        {
            "value": "<pre><code>r'&lt;img src=\"(.*)\" alt=\"Group Icon\"'\n</code></pre>\n<p>Попробуйте без r</p>\n<pre><code>mainicon = re.findall('&lt;img src=\"(.*)\" alt=\"Group Icon\"', accs[i][0])\n</code></pre>"
        },
        {
            "value": "<p>К связанным моделям тут можно обратиться как <code>m_instance.item_set</code>. Или задать (вместо стандартного <em>lowercased_classname</em><code>_set</code>) название в <code>item</code> (кстати, "
        },
        {
            "value": "<p>Есть куча книг по машинному обучению и нейронным сетям.\n<a href=\"http://www.crcpress.com/product/isbn/9781420067187\">Machine Learning: an Algorithmic Perspective</a> - пример того, что Вам нужно. <"
        },
        {
            "value": "<p>Используйте юникодные строки (<code>myvar = u\"Это строка\"</code>)<br>\nНу и сам файл скрипта должен быть в UTF-8.</p>"
        },
        {
            "value": "<p>Посмотреть это модуль: <a href=\"http://docs.python.org/library/readline.html\">readline</a>. Потом разобрать <a href=\"http://effbot.org/librarybook/readline.htm\">пример</a>. И тут <a href=\"http://ww"
        },
        {
            "value": "<pre><code>import pygame\nfrom pygame.locals import *\n</code></pre>\n<p>А зачем Вы 2 раза одно и тоже импортируете? вам достаточно только </p>\n<pre><code>import pygame\n</code></pre>\n<p>А вообще интерпре"
        },
        {
            "value": "<pre><code>subprocess.Popen(u\"%s ca %s\" % (cmd, string_param), shell = True)\n</code></pre>\n<p>Так пробывали надеюсь?</p>"
        },
        {
            "value": "<p>стоит. лицензия не помеха. тем более после изучения gtk понять swing проще</p>"
        },
        {
            "value": "<p>Читайте внимательно:</p>\n<blockquote>\n<p>communicate(input=None)</p>\n<p>Interact with process: Send data to stdin.  Read data from stdout and stderr, until end-of-file is reached. Wait for process "
        },
        {
            "value": "<p>Пробовать не пробовал, но вот ссылка - <a href=\"http://pyastra.sourceforge.net/\">Pyastra: python assembler translator</a>.</p>"
        },
        {
            "value": "<p>сохраняй в например example.ui  и в командной строке(cmd) командой \"pyuic4 example.ui -o example.py\"  превращай в код )</p>"
        },
        {
            "value": "<p>Нужно перехватить исключение KeyboardInterrupt.\nПример программы:</p>\n<pre><code>from time import sleep\n\ndef One():\n    print \"Proceesing One\"\n    sleep(10)\n\ndef Two():\n    print \"Proceesing Two\"\n "
        },
        {
            "value": "<ol>\n<li>Убеждаетесь что FreeRADIUS собран с rlm_python. Как я понимаю, это Вы уже сделали, если нет — уточните в комментариях. Вообще, сборки с experimental modules (rlm_python относится к ним) должн"
        },
        {
            "value": "<p>... цитирую \"Фрейм для размещения кнопок операций. Нужен для управления растягиванием при изменении размеров окна – весь фрейм будет «привязан» к нижней кромке окна</p>\n<pre><code>comf = Frame(tk)\n"
        },
        {
            "value": "<p>Возможен и такой вариант:\n</p><pre><code>\nfor x in (0, 1, 2, 3, 4):\n    if not x &amp; 1: \n        print \"%d is even\" % x\n</code></pre><p></p>"
        },
        {
            "value": "<p>Изощрения излишни, запустите цикл с шагом 2 и будет вам счастье.\nПример:</p>\n\n<pre><code>for x in xrange(1, c_lin - 1, 2):\n    print x\n</code></pre>\n\n<p>Третий параметр задает шаг [step]. Тогда отб"
        },
        {
            "value": "<p>Можно сделать вообще посредством javascript'a, без запросов на сервер.\nНо если хотите использовать возможности python/django, то первая идея: форма для ввода числа, кнопка submit, во view принимаем"
        },
        {
            "value": "<p>Не знаю, как на питоне. </p>\n<p>Для 239.255.0.100 в младший (с меньшим адресом в памяти (могу ошибиться с точностью до наоборот)) байт 4-х байтового int надо положить 100 в следующий - 0, потом 255"
        },
        {
            "value": "<pre><code>urpmi python-wxgtk2.8\n</code></pre>\n<p>или раз вы скачали rpm-пакет, установить его командой<br></p>\n<pre><code>rpm -Uvh имя пакета\n</code></pre>"
        },
        {
            "value": "<p>Вьюха с формой:</p>\n<pre><code>from django import forms\nfrom django.shortcuts import render_to_response\nfrom django.template import RequestContext\nfrom django.http import HttpResponse\n\nclass TheFor"
        },
        {
            "value": "<p>PATH не помогает потому, что bash смотрит в нём по порядку. В по порядку это /bin, /usr/bin и т.п. Вам надо просто добавить новый питон в другом порядке:</p>\n<pre><code>export PATH=/usr/lib/python2"
        },
        {
            "value": "<p>На основе <a href=\"http://docs.python.org/library/asyncore.html\">asyncore</a></p>\n<ul>\n<li><a href=\"http://docs.python.org/library/asyncore.html#asyncore-example-basic-http-client\">HTTP клиент</a><"
        },
        {
            "value": "<p>Хранить все числовые значения в массиве, а if переписать так:<br>\n</p>\n<pre><code>elements = [465, 641, ...]\nif j in elements:\n    #do something\n</code></pre>"
        },
        {
            "value": "<p>Можно через <a href=\"https://docs.djangoproject.com/en/1.3/ref/contrib/contenttypes/#generic-relations\">generic relations</a>, как-то так:</p>\n<pre><code>content_type = models.ForeignKey(ContentTyp"
        },
        {
            "value": "<p>Вот вам <a href=\"http://pypi.python.org/pypi/PyGall/0.9.1\">галерея на пилонах/пирамиде</a>. Качайте, изучайте код.</p>"
        },
        {
            "value": "<p>Сложно сказать что используется для python 3 в качестве адаптера, но быстрый поиск указал на это: <a href=\"http://pypi.python.org/pypi/oursql/0.9.2\">http://pypi.python.org/pypi/oursql/0.9.2</a></p>"
        },
        {
            "value": "<p>попробуйте использовать встроенную библиотеку codecs:</p>\n<pre><code>import codecs\nfileObj = codecs.open( \"someFilePath\", \"r\", \"utf_8_sig\" )\ntext = fileObj.read() # или читайте по строке\nfileObj.cl"
        },
        {
            "value": "<ol>\n<li>Строить хэш от IP + timestamp + случайное число.</li>\n<li>Использовать <a href=\"http://docs.python.org/library/uuid.html\">UUID</a></li>\n</ol>"
        },
        {
            "value": "<p>«Server has gone away» означает, что клиент пытается делать запросы на закрытом/дохлом соединении. Включите со стороны MySQL-сервера логгирование всего и вся (от запросов до коннектов-дисконнектов)"
        },
        {
            "value": "<p>После каждого обновления вызывайте <a href=\"http://doc.qt.nokia.com/latest/qcoreapplication.html#processEvents\"><code>processEvents</code></a></p>"
        },
        {
            "value": "<p><strong>1</strong>: из консоли</p>\n<pre><code>./manage.py dbshell\n</code></pre>\n<p>отрывается sql консоль.\nПишите запрос, типа:</p>\n<pre><code>ALTER TABLE profile_profile ADD COLUMN \"age\" integer;\n"
        },
        {
            "value": "<p>Разобрался сам. Если кому интересно, был задействован тестовый мидлвар, который заменял \"question\" на другое значение.</p>"
        },
        {
            "value": "<blockquote>\n<p>Очень желательно, чтобы старт/стоп были как в Денвере - два ярлычка: start и stop. \n</p>\n</blockquote>\n<p><a href=\"http://www.denwer.ru/packages/python.html\">http://www.denwer.ru/packa"
        },
        {
            "value": "<p>Попробуйте так</p>\n<pre><code>@rem Это пакетный файл make.cmd\n@echo off\n\n@rem Переходим в папку проекта\ncd /D ...\\project1\n\n@rem Выполняем make.exe\nC:\\cygwin\\bin\\make.exe\n</code></pre>\n<p>и запуска"
        },
        {
            "value": "<p>Советую почитать про фреймворк <a href=\"http://twistedmatrix.com/trac/\">Twisted</a></p>"
        },
        {
            "value": "<p>Засиделся видимо, исходная строка не была в утф, отсюда и весь сыр-бор. Стоило только спросить, как сам нашел ответ.</p>"
        },
        {
            "value": "<p>Асинхронные приложения нужны, если необходимо выполнить большое количество запросов, эти запросы будут выполняться параллельно, что гораздо быстрее, чем последовательные запросы синхронного приложе"
        },
        {
            "value": "<p>Функция AddRoot() возвращает TreeItemId (смотрим доку). А AppendItem() требует это TreeItemId в качестве параметра. По сути, в вызове \"self.tree_ctrl_1.AppendItem(root,'2')\" root - неинициализирова"
        },
        {
            "value": "<p>Запросы хоть совместимы по выводу? по числу и типу полей? Зависят друг от друга? Что значит «временная» таблица? Должна ли удаляться после рестарта? Поместится ли в память? Что предполагается с ней"
        },
        {
            "value": "<p>Если по скорости некритично, то можно так:</p>\n<pre><code>for e in g:\n    if not e in g2:\n        print e\n</code></pre>\n<p>Вот так можно получить список всех нужных элементов:</p>\n<pre><code>g = [e"
        },
        {
            "value": "<pre><code>errorIndication, errorStatus, errorIndex,varBindTable = cmdgen.CommandGenerator().nextCmd(cmdgen.CommunityData('None','initial_pysnmp'),\ncmdgen.UdpTransportTarget(('uvr-24',161)),(1,3,6,1,2"
        },
        {
            "value": "<p>Из собственных ощущений:</p>\n<ul>\n<li>BeautifulSoup удобен, но медленный.</li>\n<li>К lxml нареканий не имею, его и использовал. Работает в разы шустрее, документация, субъективно, лучше чем у BS. И"
        },
        {
            "value": "<p>Лучше не стоит парсить HTML регэкспами. Начиная с того, что, собственно, HTML не регулярен (хотя нынешние регэкспы тоже, хех, Тьюринг-полны), и заканчивая тем, что для такого придуманы lxml или Bea"
        },
        {
            "value": "<p>А почему не хотите написать дополнительный метод типа <code>time_from_time_stamp</code> к модели, который и будет возвращать нормальный datetime объект (или что вам нужно) из timestamp?<br>\nТипа:<b"
        },
        {
            "value": "<p>Если я правильно понял вопрос, то Вы хотите производить вычисления функцией для каждого объекта и выводить результат в шаблон? Если да, то считаете все эти данные в функции представления и создаете"
        },
        {
            "value": "<p>Делаем как обычную ссылку:</p>\n\n<pre><code>&lt;a href=\"first_link/\"&gt;поле1&lt;/a&gt;\n</code></pre>\n\n<p>В urls.py прописываем:</p>\n\n<pre><code>from django.views.generic.simple import direct_to_tem"
        },
        {
            "value": "<p>Как-то так:</p>\n<pre><code>mac = varBinds[0][1] # или где там у вас mac лежит?\nprint(':'.join(['%02x' % ord(x) for x in mac]))\n</code></pre>"
        },
        {
            "value": "<p>Вероятно, что бы можно было работать с моделью через свойства не только в шаблонах, но и, например, во view'ах.</p>\n<p>Кроме того декоратор @property позволяет визуально отделить свойства от методо"
        },
        {
            "value": "<p><a href=\"https://stackoverflow.com/questions/206154/whats-the-best-soap-client-library-for-python-and-where-is-the-documentation-fo/206964#206964\">Обзор на SO</a></p>\n\n<p>Лично я использовал SUDS, "
        },
        {
            "value": "<p>Насколько я понимаю, запрос <code>SELECT DISTINCT string FROM tbl</code> тут будет не самый оптимальный. </p>\n<p>Тогда можно попробовать следующий алгоритм(предварительно необходимо создать индекс "
        },
        {
            "value": "<p>Вот <a href=\"https://stackoverflow.com/questions/568271/check-if-pid-is-not-in-use-in-python\">тут</a> предлагают такой метод:</p>\n\n<pre><code>import os\n\ndef check_pid(pid):        \n    \"\"\" Check Fo"
        },
        {
            "value": "<p>\"Правильного\" здесь наверное не придумаешь, все зависит от случая. Очень удобно использовать формы основанные на моделях - почитайте про 'exclude', 'fields' и т.п., это очень мощный инструмент. Но "
        },
        {
            "value": "<p>Вот скрипт, проходит все категории и все страницы...Вчера тоже эту статью из хакера прочитал, решил с питоном ознакомиться, вот дополнил к уже существующему...</p>\n<pre><code>#!/usr/bin/env python\n"
        },
        {
            "value": "<p>На момент инициализации ForeignKey(City) модель City еще не создана, поэтому либо перенесите её выше создания модели Area, либо пропишите название модели строчно:</p>\n<pre><code>capital = models.Fo"
        },
        {
            "value": "<p>Просто вызовите из кода функцию system() и передайте ваш скрипт и его параметры</p>\n<pre><code>system(\"python myscript.py\");\n</code></pre>\n<p>Решение конечно не очень красивое, но оно работает</p>"
        },
        {
            "value": "<p>Да, это созданные собственные типы полей, для формы и модели соответственно.</p>"
        },
        {
            "value": "<p>Вообще-то время выполнения будет примерно одно и тоже, за исключением того, что используя конструкцию from smth import * в локальном контексте будут созданы ссылки на все объекты определенные в smt"
        },
        {
            "value": "<p>Если стоит задача ускорить исполнение, то можно выявить узкие места профайлером и переписать эти места с помощью C extensions, получится, что будет работать тот же код, но быстрее. Подробнее тут <a"
        },
        {
            "value": "<p>У Django с этим не очень. Она умеет, конечно <a href=\"https://stackoverflow.com/questions/2922874/how-to-stream-an-httpresponse-with-django\">выплевывать ответ постепенно</a>, но там куча подводных "
        },
        {
            "value": "<p>вот так</p>\n<pre><code>form = Form(request.POST)\nif form.is_valid():\n    model = form.save(commit = False) #не пишет в базу, возвращает модель\n    model.sex = \"female\" #то самое небольшое изменение"
        },
        {
            "value": "<p>В <a href=\"https://docs.djangoproject.com/en/1.3/howto/custom-management-commands/\">документации к django</a> все описано с примерами:</p>\n<pre><code>from optparse import make_option\n\nclass Command"
        }
    ]
}